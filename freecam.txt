
local cam = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local onMobile = not UIS.KeyboardEnabled
local keysDown = {}
local rotating = false
local freecamEnabled = false
local originalCameraType = cam.CameraType
local originalCFrame = cam.CFrame
local savedCharacterPosition = nil
local connections = {}

if not game:IsLoaded() then game.Loaded:Wait() end

local speed = 15
local sens = .3
speed /= 10
if onMobile then sens *= 2 end

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "FreecamGUI"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 120, 0, 40)
ToggleButton.Position = UDim2.new(0, 10, 0, 60)
ToggleButton.Text = "FREECAM: OFF"
ToggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ToggleButton.TextColor3 = Color3.fromRGB(255, 50, 50)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 12
ToggleButton.BorderSizePixel = 1
ToggleButton.BorderColor3 = Color3.fromRGB(100, 100, 100)
ToggleButton.Parent = ScreenGui

-- Make button draggable
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    ToggleButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

ToggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = ToggleButton.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

ToggleButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Freeze character function
local function freezeCharacter(freeze)
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if freeze then
        if humanoidRootPart then
            savedCharacterPosition = humanoidRootPart.CFrame
            -- Anchor character
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true
                end
            end
        end
        if humanoid then
            humanoid.PlatformStand = true
        end
    else
        -- Unfreeze character
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
        if humanoid then
            humanoid.PlatformStand = false
        end
        if humanoidRootPart and savedCharacterPosition then
            humanoidRootPart.CFrame = savedCharacterPosition
        end
    end
end

local function enableFreecam()
    freecamEnabled = true
    originalCFrame = cam.CFrame
    cam.CameraType = Enum.CameraType.Scriptable
    freezeCharacter(true)
    ToggleButton.Text = "FREECAM: ON"
    ToggleButton.TextColor3 = Color3.fromRGB(50, 255, 50)
    
    -- Connect movement
    connections.renderStepped = RS.RenderStepped:Connect(function()
        if rotating then
            local delta = UIS:GetMouseDelta()
            local cf = cam.CFrame
            local yAngle = cf:ToEulerAngles(Enum.RotationOrder.YZX)
            local newAmount = math.deg(yAngle) + delta.Y
            if newAmount > 65 or newAmount < -65 then
                if not (yAngle < 0 and delta.Y < 0) and not (yAngle > 0 and delta.Y > 0) then
                    delta = Vector2.new(delta.X, 0)
                end 
            end
            cf *= CFrame.Angles(-math.rad(delta.Y), 0, 0)
            cf = CFrame.Angles(0, -math.rad(delta.X), 0) * (cf - cf.Position) + cf.Position
            cf = CFrame.lookAt(cf.Position, cf.Position + cf.LookVector)
            if delta ~= Vector2.new(0, 0) then 
                cam.CFrame = cam.CFrame:Lerp(cf, sens) 
            end
            UIS.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
        else
            UIS.MouseBehavior = Enum.MouseBehavior.Default
        end

        if keysDown["Enum.KeyCode.W"] then
            cam.CFrame *= CFrame.new(Vector3.new(0, 0, -speed))
        end
        if keysDown["Enum.KeyCode.A"] then
            cam.CFrame *= CFrame.new(Vector3.new(-speed, 0, 0))
        end
        if keysDown["Enum.KeyCode.S"] then
            cam.CFrame *= CFrame.new(Vector3.new(0, 0, speed))
        end
        if keysDown["Enum.KeyCode.D"] then
            cam.CFrame *= CFrame.new(Vector3.new(speed, 0, 0))
        end
        if keysDown["Enum.KeyCode.Q"] then
            cam.CFrame *= CFrame.new(Vector3.new(0, -speed, 0))
        end
        if keysDown["Enum.KeyCode.E"] then
            cam.CFrame *= CFrame.new(Vector3.new(0, speed, 0))
        end
    end)
end

local function disableFreecam()
    freecamEnabled = false
    cam.CameraType = originalCameraType
    freezeCharacter(false)
    ToggleButton.Text = "FREECAM: OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 50, 50)
    
    -- Disconnect movement
    if connections.renderStepped then
        connections.renderStepped:Disconnect()
        connections.renderStepped = nil
    end
    
    UIS.MouseBehavior = Enum.MouseBehavior.Default
    keysDown = {}
    rotating = false
end

-- Toggle function
ToggleButton.MouseButton1Click:Connect(function()
    if freecamEnabled then
        disableFreecam()
    else
        enableFreecam()
    end
end)

local validKeys = {"Enum.KeyCode.W", "Enum.KeyCode.A", "Enum.KeyCode.S", "Enum.KeyCode.D", "Enum.KeyCode.Q", "Enum.KeyCode.E"}

UIS.InputBegan:Connect(function(Input)
    if not freecamEnabled then return end
    
    for i, key in pairs(validKeys) do
        if key == tostring(Input.KeyCode) then
            keysDown[key] = true
        end
    end
    if Input.UserInputType == Enum.UserInputType.MouseButton2 or (Input.UserInputType == Enum.UserInputType.Touch and UIS:GetMouseLocation().X > (cam.ViewportSize.X/2)) then
        rotating = true
    end
    if Input.UserInputType == Enum.UserInputType.Touch then
        if Input.Position.X < cam.ViewportSize.X/2 then
            touchPos = Input.Position
        end
    end
end)

UIS.InputEnded:Connect(function(Input)
    if not freecamEnabled then return end
    
    for key, v in pairs(keysDown) do
        if key == tostring(Input.KeyCode) then
            keysDown[key] = false
        end
    end
    if Input.UserInputType == Enum.UserInputType.MouseButton2 or (Input.UserInputType == Enum.UserInputType.Touch and UIS:GetMouseLocation().X > (cam.ViewportSize.X/2)) then
        rotating = false
    end
    if Input.UserInputType == Enum.UserInputType.Touch and touchPos then
        if Input.Position.X < cam.ViewportSize.X/2 then
            touchPos = nil
            keysDown["Enum.KeyCode.W"] = false
            keysDown["Enum.KeyCode.A"] = false
            keysDown["Enum.KeyCode.S"] = false
            keysDown["Enum.KeyCode.D"] = false
        end
    end
end)

UIS.TouchMoved:Connect(function(input)
    if not freecamEnabled then return end
    if touchPos then
        if input.Position.X < cam.ViewportSize.X/2 then
            if input.Position.Y < touchPos.Y then
                keysDown["Enum.KeyCode.W"] = true
                keysDown["Enum.KeyCode.S"] = false
            else
                keysDown["Enum.KeyCode.W"] = false
                keysDown["Enum.KeyCode.S"] = true
            end
            if input.Position.X < (touchPos.X - 15) then
                keysDown["Enum.KeyCode.A"] = true
                keysDown["Enum.KeyCode.D"] = false
            elseif input.Position.X > (touchPos.X + 15) then
                keysDown["Enum.KeyCode.A"] = false
                keysDown["Enum.KeyCode.D"] = true
            else
                keysDown["Enum.KeyCode.A"] = false
                keysDown["Enum.KeyCode.D"] = false
            end
        end
    end
end)

-- Cleanup on player leaving
game:GetService("Players").PlayerRemoving:Connect(function(p)
    if p == player then
        if freecamEnabled then
            disableFreecam()
        end
        ScreenGui:Destroy()
    end
end)
